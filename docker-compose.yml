services:
  web:
    build: .
    volumes:
      - .:/app
    ports:
      - "${FLASK_RUN_PORT}:${FLASK_RUN_PORT}"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - FLASK_APP=${FLASK_APP}
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_RUN_PORT=${FLASK_RUN_PORT}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENV=${PINECONE_ENV}
      - PINECONE_HOST=${PINECONE_HOST}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - DELTAEX_API_KEY=${DELTAEX_API_KEY}
      - CHATWOOT_ACCESS_TOKEN=${CHATWOOT_ACCESS_TOKEN}
      - CHATWOOT_ACCOUNT_ID=${CHATWOOT_ACCOUNT_ID}
      - CHATWOOT_BASE_URL=${CHATWOOT_BASE_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        if [ ! -d 'migrations' ] || [ -z "$(ls -A migrations)" ]; then
          echo 'Initializing the database...' &&
          flask db init &&
          flask db migrate -m 'Initial migration' &&
          echo 'Database initialized and initial migration created.'
        fi &&
        echo 'Applying migrations...' &&
        flask db upgrade &&
        echo 'Migrations applied.' &&
        echo 'Seeding the database...' &&
        flask seed-db &&
        echo 'Database seeding completed.' &&
        echo 'Starting the application...' &&
        gunicorn -b 0.0.0.0:${FLASK_RUN_PORT} 'run:app'
      "

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: